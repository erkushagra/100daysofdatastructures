class BinarySearchTreeNode:
    def __init__(self,data):
        self.data = data
        self.left = None
        self.right = None

    def add_child(self,data):
        if data ==self.data:
            return

        if data<self.data:
            if self.left:
                self.left.add_child(data)
            else:
                self.left = BinarySearchTreeNode(data)
        else:
            if self.right:
                self.right.add_child(data)
            else:
                self.right = BinarySearchTreeNode(data)

    def search(self,val):
        if self.data == val:
            return True

        if val<self.data:
            if self.left:
                return self.left.search(val)
            else:
                return False

            
        if val>self.data:
            if self.right:
                return self.right.search(val)
            else:
                return False

    def inorder_traversal(self):
        elements = []
        if self.left:
            elements+=self.left.inorder_traversal()

        elements.append(self.data)

        if self.right:
            elements+=self.right.inorder_traversal()
            
        return elements

    def preorder_traversal(self):
        elements = []
        elements.append(self.data)
        if self.left:
            elements+=self.left.preorder_traversal()
        if self.right:
            elements+=self.right.preorder_traversal()
        return elements

    def postorder_traversal(self):
        elements = []
        if self.left:
            elements+=self.left.preorder_traversal()
        if self.right:
            elements+=self.right.preorder_traversal()
        elements.append(self.data)
        return elements

        

    def min_element(self):
        if self.left is None:
            return self.data
        return self.left.min_element()

    def max_element(self):
        if self.right is None:
            return self.data
        return self.right.max_element()

    def calculate_sum(self):
        left_sum = self.left.calculate_sum() if self.left else 0
        right_sum = self.right.calculate_sum() if self.right else 0
        return self.data + left_sum + right_sum

def build_tree(elements):
    print("Build tree with the elements",elements)

    root = BinarySearchTreeNode(elements[0])

    for i in range(1,len(elements)):
        root.add_child(elements[i])

    return root

if __name__ == "__main__":
    numbers = build_tree([15,13,19,12,18,11,10,56])
    print("Inorder traversal:",numbers.inorder_traversal())

    countries = ["India","Pakistan","Germany", "USA","China","India","UK","USA"]
    country_tree = build_tree(countries)

    print("UK is in the list? ", country_tree.search("UK"))
    print("Sweden is in the list? ", country_tree.search("Sweden"))


    numbers = [17, 4, 1, 20, 9, 23, 18, 34]

    numbers = [15,12,7,14,27,20,23,88 ]

    numbers_tree = build_tree(numbers)
    print("Input numbers:",numbers)
    print("Min:",numbers_tree.min_element())
    print("Max:",numbers_tree.max_element())
    print("Sum:", numbers_tree.calculate_sum())
    print("In order traversal:", numbers_tree.inorder_traversal())
    print("Pre order traversal:", numbers_tree.preorder_traversal())
    print("Post order traversal:", numbers_tree.postorder_traversal())
        
            
        









            
